// github 하면서 정리하기 


1. pull request

	1) fork 
	2) clone, remote 설정
	3) branch 생성 
	4) 수정 작업 후, add, commit, push
	5) pull request 생성 
	6) 코드리뷰, merge pull request
	7) merge 이후 branch 삭제 및 동기화 



1) fork 

- 타겟 프로젝트의 저장소를 자신의 저장소로 fork한다. 


2) clone, romote 설정 

- fork로 생성한 본인 계정의 저장소에서 clone or download 버튼을 누르고 표시되는 url을 복사한다. 


			$ git clone (url 주소)

를 통해 로컬 저장소에 원경 저장소를 추가한다. 

			
			(# 원본 프로젝트 저장소를 원격 저장소로 추가)
			$ git remote add (별명) (url 주소)

			(# 원격 저장소 설정 현황 확인방법)
			$ git remote -v 


3) branch 생성 

- 자신의 로컬 컴퓨터에서 코드를 추가하는 작업은 branch를 만들어서 진행한다. 


			( # develop 이라는 이름의 branch를 생성한다)
			$ git checkout -b develop

			( # 이제 2개의 브랜치가 존재한다. )
			$ git branch

			// develop 	( 내가 생성한 브랜치 )
			// master 	( 기존에 원래 있던 것 )


> 개발을 하다 보면 코드를 여러 개로 복사해야 하는 일이 자주 생긴다. 코드를 통째로 복사하고 나서 원래 코드와는 상관없이 독립적으로 개발을 진행할 수 있는데, 이렇게 독립적으로 개발하는 것이 브랜치다. 



4) 수정 작업 후 add, commit, push

- 자신이 사용하는 코드 편집 툴을 활용하여 수정 작업을 진행한다. 

- 작업이 완료되면, add, commit, push를 통해서 자신의 github 저장소에 수정사항을 반영한다. 

- (주의사항) push 진행시에 branch 이름을 명시해주어야 한다. 


5) pull request 생성 

- push 완료 후에 본인 계정의 github 저장소에 들어오면 compare & pull request 버튼이 활성화 되어 있다. 

- 해당 버튼을 선택하여 메시지를 작성하고 PR을 생성한다. 


6) 코드리뷰, merge pull request

- PR을 받은 원본 저장소 관리자는 코드 변경내역을 확인하고 merge 여부를 결정한다. 


7) merge 이후 동기화 및 branch 삭제 

- 원본 저장소에 merge가 완료되면 로컬 코드와 원본 저장소의 코드를 동기화 한다. 

- 작업 하던 로컬의 branch를 삭제한다. 


			( # 코드 동기화)
			$ git pull real-blog(remote 별명)

			( # 브랜치 삭제)
			$ git branch -d develop(브랜치 별명)


- 나중에 추가로 작업할 일이 있으면 

			$ git pull real-blog (remote 별명)

을 통해서 원본 저장소와 동기화를 진행하고 3~7번을 반복한다. 




